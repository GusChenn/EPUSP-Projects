// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/23/2020 20:25:00"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          alarme
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module alarme_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a0;
reg a1;
reg a2;
reg a3;
reg ck;
// wires                                               
wire alarme;

// assign statements (if any)                          
alarme i1 (
// port map - connection between master ports and signals/registers   
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.alarme(alarme),
	.ck(ck)
);
initial 
begin 
#1000000 $finish;
end 

// ck
always
begin
	ck = 1'b0;
	ck = #500 1'b1;
	#500;
end 

// a0
always
begin
	a0 = 1'b0;
	a0 = #62500 1'b1;
	#62500;
end 

// a1
always
begin
	a1 = 1'b0;
	a1 = #125000 1'b1;
	#125000;
end 

// a2
always
begin
	a2 = 1'b0;
	a2 = #250000 1'b1;
	#250000;
end 

// a3
always
begin
	a3 = 1'b0;
	a3 = #500000 1'b1;
	#500000;
end 
endmodule

